lksh
3
gr
sud
abc

#include <bits/stdc++.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define pi pair <int, int>
#define forn(i, n) for(int i = 0; i < (int)(n); i++)

typedef long long ll;

const int INF = 1000000000;
const int MAXN = 1005;
const int MAXM = 1005;
const int S = 95;

string s, t;
int ans[MAXM];

struct Node {
	int next[S], go[S];
	int leaf, link, p, pch;
	Node(){
		memset(next, -1, sizeof(next));
		memset(go, -1, sizeof(go));
		leaf = 0;
		link = p = -1;
	}
};

Node tree[MAXM];
int sz;


void add_string(const string &s, int num) {
	int v = 0;
	for(char c : s) {
		c -= ' ';
		if (tree[v].next[c] == -1) {
			tree[v].next[c] = ++sz;
			tree[sz].p = v;
			tree[sz].pch = c;
		} 
		v = tree[v].next[c];
	}
	tree[v].leaf = num;
}

int go(int v, int c);

int get_link(int v) {
	if (tree[v].link == -1) { 
		if (!v || !tree[v].p)
			tree[v].link = 0;
		else
			tree[v].link = go(get_link(tree[v].p), tree[v].pch);
	}
	return tree[v].link;
}

int go(int v, int c) {
	if (tree[v].go[c] == -1) {
		if (tree[v].next[c] != -1)
			tree[v].go[c] = tree[v].next[c];
		else
			tree[v].go[c] = !v ? 0 : go(get_link(v), c);
	}
	return tree[v].go[c];
}

void suf_link(int v) {
	if (!v || ans[tree[v].leaf]) return;
	ans[tree[v].leaf] = 1;
	suf_link(tree[v].link);
}

void solve(int n, int m){
	int v = 0;
	forn(i, n) {
		v = go(v, t[i] - ' ');
		ans[tree[v].leaf] = 1;
	}

	for (int i = sz; i >= 0; i--){
		if (ans[tree[i].leaf])
			suf_link(tree[i].link);
	}

	int flag = 0;
	forn(i, m) {
		if (ans[i + 1])
			flag = 1;
	}
	if (flag) cout << t << '\n';
}

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	freopen("console.in", "r", stdin);
	//freopen("console.out", "w", stdout);

	int n, m;
	cin >> m;
	getline(cin, s);

	forn(i, m) {
		getline(cin, s);
		//cout << s << "e\n";
		add_string(s, i + 1);
	}

	while (getline(cin, t)){
		//cout << t << "e\n";
		memset(ans, 0, m + 5);
		n = int(t.size());
		solve(n, m);
	}
	
	return 0;
}